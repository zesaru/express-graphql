type Cliente {
  id: ID
  nombre: String
  apellido: String
  empresa: String
  emails: [Email]
  edad: Int
  tipo: TipoCliente
  pedidos: [Pedido]
}
type Email {
  email: String
}
type Pedido {
  producto: String
  precio: Int
}

type Producto {
  id: ID
  nombre: String!
  precio: Int!
  stock: Int!
}
enum TipoCliente {
  BASICO
  PREMIUM
}
type Query {
  getClientes(limite: Int, offset: Int): [Cliente]
  getCliente(id: ID): Cliente
  totalClientes: String

  # Productos
  obtenerProductos(limite: Int, offset: Int): [Producto]
  obtenerProducto(id: ID!): Producto
}
input PedidoInput {
  producto: String
  precio: Int
}
input EmailInput {
  email: String
}
"""
campos para los clientes nuevos
"""
input ClienteInput {
  id: ID
  nombre: String!
  apellido: String!
  empresa: String!
  emails: [EmailInput]
  edad: Int!
  tipo: TipoCliente!
  pedidos: [PedidoInput]
}
"""
campos para los agregar nuevos productos
"""
input ProductoInput {
  id: ID
  nombre: String!
  precio: Int!
  stock: Int!
}
"""
Mutation para crear nuevos clientes
"""
type Mutation {
  #Nombre del resolver, Input con Datos y Valor que retorna
  """
  Te permite crear nuevos clientes
  """
  crearCliente(input: ClienteInput): Cliente
  actualizarCliente(input: ClienteInput): Cliente
  eliminarCliente(id: ID!): String
  #productos
  nuevoProducto(input: ProductoInput): Producto
}
